#' Self-adjusting mixture (SAM) prior
#'
#' Mixing the mixture prior from historical data with a non-informative prior
#' based on pre-specified SAM weight.
#'
#' @param priormix prior (mixture of conjugate distributions).
#' @param weight weight given to the informative component (0 < \code{weight} < 1).
#' @param mean mean of the non-informative component. It is recommended to set this parameter explicitly.
#' @param n number of observations the non-informative prior
#' corresponds to, defaults to 1.
#' @param ... optional arguments are ignored.
#'
#' @details It is recommended to robustify informative priors derived
#' with \code{\link{gMAP}} using unit-information priors . This
#' protects against prior-data conflict, see for example
#' \emph{Schmidli et al., 2015}.
#'
#' The procedure can be used with beta, gamma and normal mixture
#' priors. A unit-information prior (see \emph{Kass and Wasserman,
#' 1995}) corresponds to a prior which represents the observation of
#' n=1 at the null hypothesis. As the null is problem dependent we
#' \emph{strongly recommend} to make use of the \code{mean} argument
#' accordingly. See below for the definition of the default mean.
#'
#' The weights of the mixture priors are rescaled to \code{weight}
#' while the non-informative prior is assigned the \code{(1-weight)}
#' given.
#'
#' @return New mixture with an extra non-informative component named
#' \code{robust}.
#'
#' @references Schmidli H, Gsteiger S, Roychoudhury S, O'Hagan A,
#' Spiegelhalter D, Neuenschwander B.  Robust meta-analytic-predictive
#' priors in clinical trials with historical control information.
#' \emph{Biometrics} 2014;70(4):1023-1032.
#'
#' Kass RE, Wasserman L A Reference Bayesian Test for Nested
#' Hypotheses and its Relationship to the Schwarz Criterion \emph{J
#' Amer Statist Assoc} 1995; 90(431):928-934.
#'
#' @seealso \code{\link{mixcombine}}
#'
#' @examples
#' set.seed(123)
#' prior.historical <- mixbeta(c(1, 10, 40))
#' data.control     <- rbinom(60, size = 1, prob = 0.2)
#' wSAM             <- SAM_weight(priormix = prior.historical,
#'                                delta = 0.1,
#'                                data = data.control)
#' SAM.prior        <- SAM_prior(priormix = prior.historical,
#'                               weight = wSAM, mean = 0.5)
#' plot(SAM.prior)
#'
#' sigma      <- 3
#' prior.mean <- 0
#' prior.se   <- sigma/sqrt(30)
#'
#' prior.historical <- mixnorm(c(1, prior.mean, prior.se), sigma = sigma)
#' data.control     <- rnorm(30, mean = 1, sd = sigma)
#' wSAM             <- SAM_weight(priormix = prior.historical,
#'                                delta = 0.2 * sigma,
#'                                data = data.control)
#' SAM.prior        <- SAM_prior(priormix = prior.historical,
#'                               weight = wSAM, mean = 0, sigma = sigma)
#' plot(SAM.prior)
#'
#' @export
SAM_prior <- function(priormix, weight, mean, n = 1, ...) UseMethod("SAM_prior")

#' @export
SAM_prior.default <- function(priormix, weight, mean, n = 1, ...) "Unknown density"

#' @describeIn SAM_prior The default \code{mean} is set to 1/2 which
#' represents no difference between the occurrence rates for one of the
#' two outcomes. As the uniform \code{Beta(1,1)} is more appropriate in
#' practical applications, \code{RBesT} uses \code{n+1} as the sample
#' size such that the default robust prior is the uniform instead of
#' the \code{Beta(1/2,1/2)} which strictly defined would be the unit
#' information prior in this case.
#' @export
SAM_prior.betaMix <- function(priormix, weight, mean, n=1, ...) {
  checkmate::assert_number(weight, lower=0, upper=1)
  checkmate::assert_number(n, lower=0, finite=TRUE)
  if(missing(mean)) {
    message("Using default mean for robust component of 1/2.")
    mean <- 1/2
  }
  checkmate::assert_number(mean, lower=0, upper=1)
  rob <- mixbeta(robust=c(1, mean, n+1), param="mn")
  mixcombine(priormix, rob, weight=c(weight, 1-weight))
}

#' @describeIn SAM_prior The default \code{mean} is set to the mean of the
#' prior mixture. It is strongly recommended to explicitly set the
#' mean to the location of the null hypothesis.
#' @export
SAM_prior.gammaMix <- function(priormix, weight, mean, n=1, ...) {
  checkmate::assert_number(weight, lower=0, upper=1)
  checkmate::assert_number(n, lower=0, finite=TRUE)
  if(missing(mean)) {
    s <- summary(priormix)
    message(paste("Using default mean for robust component; the mean of the prior which is", s["mean"], "."))
    mean <- s["mean"]
  }
  checkmate::assert_number(mean, lower=0, finite=TRUE)
  rob <- mixgamma(robust=c(1, mean, n), param="mn", likelihood=likelihood(priormix))
  mixcombine(priormix, rob, weight=c(weight, 1-weight))
}

#' @describeIn SAM_prior The default \code{mean} is set to the mean
#' of the prior mixture. It is strongly recommended to explicitly set
#' the mean to the location of the null hypothesis, which is very
#' often equal to 0. It is also recommended to explicitly set the
#' sampling standard deviation using the \code{sigma} argument.
#' @param sigma Sampling standard deviation for the case of Normal
#' mixtures.
#' @export
SAM_prior.normMix <- function(priormix, weight, mean, n=1, ..., sigma) {
  checkmate::assert_number(weight, lower=0, upper=1)
  checkmate::assert_number(n, lower=0, finite=TRUE)
  if(missing(mean)) {
    s <- summary(priormix)
    message(paste("Using default mean for robust component; the mean of the prior which is", s["mean"], "."))
    mean <- s["mean"]
  }
  checkmate::assert_number(mean, finite=TRUE)
  if(missing(sigma)) {
    message("Using default prior reference scale ", RBesT::sigma(priormix))
    sigma <- RBesT::sigma(priormix)
  }
  rob <- mixnorm(robust=c(1, mean, n), param="mn", sigma=sigma)
  mixcombine(priormix, rob, weight=c(weight, 1-weight))
}

